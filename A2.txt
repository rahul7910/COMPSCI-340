COMPSCI 340 ASSIGNMENT 2Rahul Issar588382864riss899Part 1 Question 1 Currently source has 4 files and mount has 0. Originally mount has no directories. When you run the command python a2fuse1.py source mount, it will print out alot of information which tells you what the file system is doing. When we view mount now it contains the same files as the source directory. The source directory has been mounted on the mount directory, the user file system which works as the real file system on the machine. If we go to that directory and look at it we can see those 4 files. Part 1 Question 2 cat oneten answers getattr / oneten (None,) - gets the file attributes associated with the file oneten which is in the mount directory. st_ctime is the creation time, st_mtime is the modified time,st_nlink is the number of hard links, st_mode is the file access mode, st_size is the size inbytes, st_gid is the group id, st_uid is the user id, st_atime is the last accessed time. The -> open / oneten is the line where the open function is called the <- return value of open. read / oneten reads the file. line 6 shows the output of what the file contains. getattr/oneten(None,) referenced from the first line. Same applies with line 8.  line 9 flush / oneten , this operation forces the file data into the file cache in RAM.  Line 10 None is a way to reset it to its original, empty state. line 11 release is called when fuse is completely done with a file; at that point, you can free up any temporarily allocated data structures. line 12 reference line 10   cat > newfile answers 1. getattr / newfile (None,) - gets the file attributes associated with the file oneten which is in the mount directory. 2. Line 2 is giving an error since it's trying to use the relative path, which means that the program looks for the file in the working directory. The error is telling you that there is no file of that name in the directory. 3. create - if the file does not exist it will be created 4. return value of create   5. getattr / newfile (None,) - gets the file attributes associated with the file oneten which is in the mount directory.6. st_ctime is the creation time, st_mtime is the modified time, st_nlink is the number of hard links, st_mode is the file access mode, st_size is the size in bytes, st_gid is the group id, st_uid is the user id, st_atime is the last accessed time.7. The flush operation forces the file (newfile) data into the cache in RAM. 8. Flush None resets it to its original, empty state. Hello world answers1. getxattr() retrieves the value of the extended attribute identified by name and associated with the given path in the filesystem. u'security.capability' is an extended attribute to do with security (read and write access permissions) 2.  The filesystem does not support extended attribute 3. writing replaces any previous value with a new value4. The return value of write  ^D answers 1. The flush operation forces the file (newfile) data into the cache in RAM.2. Flush None closes the file 3. release method is used when FUSE is completely done with file; at that point, you can free up any temporarily allocated data structures. 4. release None resets it to its original, empty statels answers1. The opendir() function opens a directory stream corresponding to the directory name, and returns a pointer to the directory stream. 2. Return value of opendir 3. getattr / (None,) - gets the file attributes associated with / which is the mount directory. The output is a dictionary.4. st_ctime is the creation time, st_mtime is the modified time, st_nlink is the number of hard links, st_mode is the file access mode, st_size is the size in bytes, st_gid is the group id, st_uid is the user id, st_atime is the last accessed time.5. The readdir function returns a pointer to a dirent struture representing the next directory entry in the directory stream pointed pointed to by dirp.  6. DEBUG:fuse.log-mixin:<- readdir <generator object readdir at 0x7f34bab3fe60>7. getattr / twothousand (None,) - gets the file (twothousand) attributes associated with the file oneten which is in the mount directory.8. st_ctime is the creation time, st_mtime is the modified time, st_nlink is the number of hard links, st_mode is the file access mode, st_size is the size in bytes, st_gid is the group id, st_uid is the user id, st_atime is the last accessed time.9. getattr / oneten (None,) - gets the file attributes associated with the file oneten which is in the mount directory.10.  st_ctime is the creation time, st_mtime is the modified time, st_nlink is the number of hard links, st_mode is the file access mode, st_size is the size in bytes, st_gid is the group id, st_uid is the user id, st_atime is the last accessed time.rm newfile 1.  getattr /(None,) - gets the file attributes associated with the file oneten which is in the mount directory.2. st_ctime is the creation time, st_mtime is the modified time, st_nlink is the number of hard links, st_mode is the file access mode, st_size is the size in bytes, st_gid is the group id, st_uid is the user id, st_atime is the last accessed time.3. getattr / newfile (None,) - gets the file (newfile) attributes associated with the file oneten which is in the mount directory.4. st_ctime is the creation time, st_mtime is the modified time, st_nlink is the number of hard links, st_mode is the file access mode, st_size is the size in bytes, st_gid is the group id, st_uid is the user id, st_atime is the last accessed time.5. access checks whether the calling process can access the file pathname 6. None resets it to its original, empty state7. Unlink function is used to remove the file, so unlink/newfile() will be removed from the directory. 8. None resets it to its original, empty statePart 2 Question 3 __init__ 1.	Self.files creates a empty dictionary 2.	Declares a self.data variable and initialises it to defaultdict(bytes) 3.	0 is assigned to self.fd 4.	now variable stores the current time 5.	general, self.files is a dict mapping to information, on line 25, it sets the info for “/” which is the key. GettatrIf the path is in the dict, it doesn’t return the path. It returns the information stored for the path. readdirit returns a list. The first two elements are “.” And “..” and then it appends the result of the dict comprehension that follows, which is a list of files. Open Increment self.fd by 1 then returning it. CreateSelf.files is a dict mapping paths to information, on line 38. It sets the info for “path” which is the key. UnlinkSince self.files is a dictionary, it looks for a dictionary entry having the key path. It just effectively deletes the dictionary entry. Write126 takes the first offset entries a slice from index 0, to index offset, takes a slice of the item from index offset, size entries long. Read Slices the list, it’s offset is from the beginning of the list 